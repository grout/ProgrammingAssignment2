## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
## Calculate and store the inverse if it
## hadn't been calculated before
## otherwise use the stored result
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
## Calculate and store the inverse if it
## hadn't been calculated before
## otherwise use the stored result
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
matrix <- makeCacheMatrix()
matrix
matrix <- makeCacheMatrix(c(0,9))
matrix
matrix.get()
matrix <- makeCacheMatrix(matrix([1, 2, 3, 4], nrows=2)
matrix(1, 2, 3, 4)
matrix(1, 2, 3, 4, nrows=2)
matrix((1, 2, 3, 4) nrows=2)
matrix((1, 2, 3, 4), nrows=2)
matrix([1, 2, 3, 4], nrows=2)
?matrix
matrix(c(1, 2, 3, 4), nrows=2)
matrix(c(1, 2, 3, 4), nrow=2)
matrix(c(1, 2, 3, 4), nrow=2)
m <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow=2))
m
m.get
m.get()
m.get
get(m)
m
m.get()
m.getinverse()
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
## Calculate and store the inverse if it
## hadn't been calculated before
## otherwise use the stored result
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
m <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2))
m
## Put comments here that give an overall description of what your
## functions do
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Return a matrix that is the inverse of 'x'
## Calculate and store the inverse if it
## hadn't been calculated before
## otherwise use the stored result
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
m <- makeCacheMatrix(matrix(c(1, 2, 3, 4), nrow = 2))
m.get()
